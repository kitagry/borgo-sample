use os
use fmt
use io
use bytes
use errors

fn main() {
  match run() {
    Ok(_) => os.Exit(0),
    Err(err) => {
      fmt.Println(err);
      os.Exit(1);
    }
  }
}

fn run() -> Result<string, error> {
  let decoder = Decoder.new(os.Stdin)?;
  let v = decoder.decode()?;
  print_value(v);
  Ok("ok")
}

enum Value {
  Null,
  String(string),
}

fn print_value(v: Value) {
  match v {
    Value.Null => fmt.Print("null"),
    Value.String(s) => {
      let placeholder = \\ "%s"
      fmt.Printf(placeholder, s);
    }
  }
}

struct Decoder {
  s: [byte],
  current_index: int,
}

fn Decoder.new(r: io.Reader) -> Result<*Decoder, error> {
  let s = io.ReadAll(r)?;

  Ok(&Decoder {
    s: s,
    current_index: 0,
  })
}

impl (d: *Decoder) {
  fn decode() -> Result<Value, error> {
    if d.s.Len() == 0 {
      return Err(errors.New("input is empty"));
    }

    match d.s[d.current_index] {
      'n' => {
        if d.s.Len() < d.current_index + 4 {
          return Err(fmt.Errorf("unknwon input: %s", d.s))
        }

        let n = take(d.s, d.current_index, d.current_index+4);
        if fmt.Sprintf("%s", n) != "null" {
          return Err(fmt.Errorf("unknwon input: %s", n))
        }

        d.current_index = d.current_index + 4
        return Ok(Value.Null)
      }
      '"' => {
        let mut last_doublequote = d.current_index + 1;
        loop {
          if d.s.Len() <= last_doublequote {
            return Err(fmt.Errorf("no doublequote found: %s", d.s))
          }

          if d.s[last_doublequote] == '"' {
            break;
          }
          last_doublequote = last_doublequote + 1
        }

        let result = take(d.s, d.current_index+1, last_doublequote);
        d.current_index = last_doublequote
        return Ok(Value.String(fmt.Sprintf("%s", result)))
      }
      _ => return Err(fmt.Errorf("unknwon input: %s", d.s))
    }
    Ok(Value.Null)
  }
}

fn take(s: [byte], start: int, end: int) -> [byte] {
  let mut i = start;
  let mut result = [];
  while i < end {
    result = result.Append(s[i]);
    i = i + 1;
  }
  result
}
